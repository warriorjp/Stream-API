
--------------------------------CREATE-CUSTOME-EXCEPTION-CLASS----------------------------------------------------------------
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

---------------------------------CREATE-GLOBAL-EXCEPTION-CLASS---------------------------------------------------------------

@ControllerAdvice
public class GlobalExceptionHandler {

    // Handle specific exception
    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<String> handleResourceNotFound(ResourceNotFoundException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
    }

    // Handle generic exceptions
    @ExceptionHandler(Exception.class)
    public ResponseEntity<String> handleGenericException(Exception ex) {
        return new ResponseEntity<>("Something went wrong: " + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

@RestController
@RequestMapping("/users")
public class UserController {

    private Map<Integer, String> userDB = Map.of(1, "Jay", 2, "Rita");

    @GetMapping("/{id}")
    public String getUser(@PathVariable int id) {
        String user = userDB.get(id);

        if (user == null) {
            throw new ResourceNotFoundException("User not found with ID: " + id);
        }

        return user;
    }
}
