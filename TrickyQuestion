✅ When calling testMethod(null), both testMethod(Object) and testMethod(String) are potential candidates.
Since String is a subclass of Object, Java will prefer the most specific method. So, the String version should be selected.

public class TestClass {
    public void testMethod(Object obj) {
        System.out.println("Object method called");
    }

    public void testMethod(String str) {
        System.out.println("String method called");
    }

    public static void main(String[] args) {
        TestClass obj = new TestClass();
        obj.testMethod(null);
    }
}


However, if both methods had similarly specific parameters (like Integer and String), Java would throw a compilation error due to ambiguity.
//ambiguty issue
public void testMethod(Integer inte) {
        System.out.println("Integer method called");
    }

    public void testMethod(String str) {
        System.out.println("String method called");
    }
____________________________________________________________________________________________________________________________________________
✅ Feature	start()	 & run() : 
->Start, create a new thread and execute run() in that new thread.	
->Runs run() in the current thread (does not create a new thread).
->Use start() when you want true parallel execution using multiple threads.
->Calling run() directly executes it like a normal method and does not create a new thread.

->The run() method contains the logic to execute when a thread starts.
->The Thread class internally calls run() when start() is invoked.

class MyThread extends Thread {
    public void run() {
        System.out.println(Thread.currentThread().getName() + " is running");
    }
}

public class Test {
    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        MyThread t2 = new MyThread();

        t1.start(); // Creates a new thread
        t2.start(); // Creates another new thread

        t1.run(); // Runs like a normal method in the main thread
        t2.run();
    }
}

OUTPUT :
Thread-0 is running
Thread-1 is running
main is running
main is running


____________________________________________________________________________________________________________________________________________
✅ In Java, if two interfaces have the same method signature but different return types, and a class tries to implement both interfaces,
It will cause a compilation error due to ambiguity in the return type.
- Java doesn't allow method overloading based only on return type.

interface A {
    int show();
}

interface B {
    String show();
}

class C implements A, B {  // Compilation Error
    @Override
    public int show() {   // Ambiguity! Cannot satisfy both return types
        return 10;
    }
}

Result :
C is not abstract and does not override the abstract method show() in B

____________________________________________________________________________________________________________________________________________
✅ In Java, a non-static variable cannot be accessed directly inside a static method because static methods belong to the class itself. 
while non-static variables belong to an instance of the class.

class Example {
    int instanceVar = 10; // Non-static variable

    static void staticMethod() {
        System.out.println(instanceVar); // ❌ Error: Cannot access non-static variable from a static method
    }

    public static void main(String[] args) {
        staticMethod();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------
 To access a non-static variable, create an instance of the class:

class Example {
    int instanceVar = 10;

    static void staticMethod() {
        Example obj = new Example();  // Create an instance
        System.out.println(obj.instanceVar);  // Access via instance
    }

    public static void main(String[] args) {
        staticMethod(); // This will work now
    }
}

____________________________________________________________________________________________________________________________________________
✅ - Yes, we can make an inner class static, which is called a static nested class in Java.
- We can't make the outer class static

class Outer {
    static int staticVar = 100;
    int instanceVar = 200;

    static class StaticInner { // ✅ Static nested class
        void display() {
            System.out.println("Static variable: " + staticVar); // ✅ Allowed
            // System.out.println("Instance variable: " + instanceVar); // ❌ Not allowed (Needs Outer class instance)
        }
    }
}

public class Main {
    public static void main(String[] args) {
        // No need to create Outer class object
        Outer.StaticInner innerObj = new Outer.StaticInner();
        innerObj.display();
    }
}

____________________________________________________________________________________________________________________________________________
✅ @FunctionalInterface annotation ensures that only one abstract method exists.
The lambda expression message -> System.out.println("Message: " + message) provides an implementation for showMessage.

@FunctionalInterface
interface MyFunctionalInterface {
    void showMessage(String message);
}

public class LambdaExample {
    public static void main(String[] args) {
        // Lambda expression implementing MyFunctionalInterface
        MyFunctionalInterface myFunc = message -> System.out.println("Message: " + message);
        
        // Calling the method
        myFunc.showMessage("Hello from Lambda!");
    }
}

____________________________________________________________________________________________________________________________________________
Java's Built-in Functional Interfaces (Consumer, Function, Predicate, Supplier)

import java.util.function.*;

public class FunctionalInterfaceExample {
    public static void main(String[] args) {
------------------------------------------------------------------------------------------------------
-> Predicate 
  - Represents a function that takes an input and returns a boolean (true/false).
  - Used for filtering, validation, and conditions.

        Predicate<Integer> isEven = num -> num % 2 == 0;
        System.out.println("Is 4 even? " + isEven.test(4));
------------------------------------------------------------------------------------------------------
 -> Consumer 
  - Represents an operation that accepts an input but does not return a result.
  - Used for operations like printing, modifying objects, or saving data.

        Consumer<String> consumer = message -> System.out.println("Consumed: " + message);
        consumer.accept("Hello Consumer");
------------------------------------------------------------------------------------------------------
-> Supplier 
  - Represents a function that does not take any input but returns a value.
  - Used for lazy initialisation, getting system properties, or generating random values.

        Supplier<Double> randomValue = () -> Math.random();
        System.out.println("Random Value: " + randomValue.get());
------------------------------------------------------------------------------------------------------
-> Function 
  - Represents a function that takes one input and returns a result.
  - Commonly used for data transformation (e.g., converting String to Integer).

        Function<Integer, String> function = num -> "Number is " + num;
        System.out.println(function.apply(10));
------------------------------------------------------------------------------------------------------
    }
}

____________________________________________________________________________________________________________________________________________
✅ Rules for Exception Handling in Method Overriding:
** If a parent class method declares an exception using throws, the behavior of the child class method (overridden method) 
depends on the following rules:
- Same Exception: The child class method can declare the same exception as the parent class method.
- Subclass Exception: The child class method can declare a subclass of the exception declared in the parent class.
- No Exception: The child class method can choose not to declare any exception, even if the parent method declares one.
- Super Exception Not Allowed: The child class method cannot declare a broader (superclass) exception than the parent method.

class Parent {
    void show() throws Exception {
        System.out.println("Parent method");
    }
}

class Child extends Parent {
    @Override
    void show() throws Exception { // Same exception is allowed
        System.out.println("Child method");
    }

class Child extends Parent {
    @Override
    void show() throws ArithematicalException { // Child exception is allowed
        System.out.println("Child method");
    }
}

** If the parent class method does not declare any exception, the overridden method in the child class cannot
declare a checked exception. However, it can declare an unchecked (runtime) exception. Or no exception also allowed.

class Parent {
    void show() {  // No exception declared
        System.out.println("Parent method");
    }
}

class Child extends Parent {
    @Override
    void show() throws IOException { // ❌ Compilation Error: Cannot throw a checked exception
        System.out.println("Child method");
    }

 @Override
    void show() throws ArithmeticException { // ✅ Allowed (Unchecked Exception)
        System.out.println("Child method");
    }
}
____________________________________________________________________________________________________________________________________________
✅ ## Constructor chaining is a technique in Java where one constructor calls another constructor in the same class or a superclass.
This helps in code reuse and reducing redundancy.

class Example {
    int x;
    String name;

    // Default Constructor
    Example() {
        this(10);  // Calls the single parameter constructor
        System.out.println("Default Constructor");
    }

    // Single Parameter Constructor
    Example(int x) {
        this(x, "John"); // Calls the two-parameter constructor
        System.out.println("Single Parameter Constructor: x = " + x);
    }

    // Two Parameter Constructor
    Example(int x, String name) {
        this.x = x;
        this.name = name;
        System.out.println("Two Parameter Constructor: x = " + x + ", name = " + name);
    }

    public static void main(String[] args) {
        Example obj = new Example();  
    }
}

____________________________________________________________________________________________________________________________________________
-> If an exception occurs in both the try and finally blocks, the finally block's exception overrides the original one from the try block.

public class FinallyExceptionExample {
    public static void main(String[] args) {
        try {
            System.out.println("Inside try block");
            throw new NullPointerException("Try block exception");
        } finally {
            System.out.println("Finally block executed.");
            throw new ArithmeticException("Finally block exception");
        }
    }
}

OUTPUT :
Inside try block
Finally block executed.
Finally block exception

____________________________________________________________________________________________________________________________________________
✅ -> try-with-resources :
Introduced in Java 7, try-with-resources is a feature that allows automatic resource management (ARM). 
It ensures that resources like files, database connections, sockets, etc., are closed automatically at the end of the try block.
- automatically closes resources after execution.
- no need of extra code like finally

import java.io.*;
public class TryWithResourcesExample {
    public static void main(String[] args) {
        try (BufferedReader br = new BufferedReader(new FileReader("test.txt"))) {
            System.out.println(br.readLine());  // Read first line
        } catch (IOException e) {
            System.out.println("Error: " + e.getMessage());
        }
    }
}


____________________________________________________________________________________________________________________________________________
✅ -> Deep copy we create new object and return 
-> Shallow copy we return Copies the reference of the mutable object

public final class DeepPerson {
    private final String name;
    private final List<String> hobbies;
    private final List<String> sport;

   public DeepPerson(String name, List<String> sport) {
        this.name = name;
        this.sport = sport; // shallow copy
    }

    public DeepPerson(String name, List<String> hobbies) {
        this.name = name;
        this.hobbies = new ArrayList<>(hobbies); // Deep copy
    }

    public String getName() {
        return name;
    }

    public List<String> getHobbies() {
        return Collections.unmodifiableList(hobbies); // Defensive copy
    }
}


____________________________________________________________________________________________________________________________________________
✅ In Java, streams are consumed only once. It cannot be reused once a stream is processed (e.g., using terminal operations like forEach, collect,
count, etc.). If you try to operate on it again, it will throw an IllegalStateException.

public class StreamReuseExample {
    public static void main(String[] args) {
        List<Integer> numbers = List.of(5, 3, 9, 1, 4);

        Stream<Integer> stream = numbers.stream().sorted();

        // First usage: Works fine
        stream.forEach(System.out::println);

        // Second usage: Throws IllegalStateException
        stream.forEach(System.out::println);
    }
}

____________________________________________________________________________________________________________________________________________
✅ # Thread.Run() And Runneable.Run()

>> Runs in a new thread when start() is called on Thread object

        class MyThread extends Thread {
            public void run() {
                System.out.println("Thread is running in: " + Thread.currentThread().getName());
            }
        }
        
        public class Main {
            public static void main(String[] args) {
                MyThread t1 = new MyThread();
                t1.start(); // ✅ starts a new thread and calls run()
            }
        }

>> Runs in a new thread only if passed to a Thread object to the thread class and start() is called.

        class MyRunnable implements Runnable {
            public void run() {
                System.out.println("Runnable is running in: " + Thread.currentThread().getName());
            }
        }
        
        public class Main {
            public static void main(String[] args) {
                MyRunnable task = new MyRunnable();
        
                Thread t1 = new Thread(task);
                t1.start(); // ✅ starts a new thread and calls run()
            }
        }
________________________________________________________________________________________________________________________________________
✅ Multiple inheritance is not allowed, but we can achieve a similar thing using the default method.

interface A {
    default void show() {
        System.out.println("A");
    }
}

interface B {
    default void show() {
        System.out.println("B");
    }
}

class C implements A, B {
    // Must override the conflicting method
    public void show() {
        System.out.println("C: Resolving conflict between A and B");
        A.super.show();  // Optionally call specific interface's method
        B.super.show();
    
}

public class Main {
    public static void main(String[] args) {
        C obj = new C();
        obj.show();
    }
}
OUTPUT :
C: Resolving conflict between A and B
A
B
________________________________________________________________________________________________________________________________________
✅ An anonymous class in Java is a type of inner class that doesn't have a name and is declared and instantiated all at once.
It is typically used to provide a quick implementation of an interface or an abstract class, often when you need a short-term 
object without the need to create a full class separately.

Example 1 :
interface Greeting {
    void sayHello();
}

public class Main {
    public static void main(String[] args) {
        Greeting greeting = new Greeting() {
            public void sayHello() {
                System.out.println("Hello from anonymous class!");
            }
        };
        greeting.sayHello();
    }
}

Example 2 :
abstract class Animal {
    abstract void sound();
}

public class Main {
    public static void main(String[] args) {
        Animal dog = new Animal() {
            void sound() {
                System.out.println("Bark!");
            }
        };
        dog.sound();
    }
}

________________________________________________________________________________________________________________________________________
✅ A circular dependency occurs when two or more components/classes depend on each other directly or indirectly, creating a loop.
This can cause issues with dependency injection, application startup, or the design structure.

@Component
public class A {
    @Autowired
    private B b;
}

@Component
public class B {
    @Autowired
    private A a;
}

->  Decouple the business logic using a mediator/service/facade, so the two beans don’t directly depend on each other.
@Component
public class A {
    @Autowired
    private MediatorService mediator;
}

@Component
public class B {
    @Autowired
    private MediatorService mediator;
}

@Component
public class MediatorService {
    public void handleAStuff() {}
    public void handleBStuff() {}
}

________________________________________________________________________________________________________________________________________
✅  How to make sure JVM won't get full or memory leakage issues:

-> Make Objects Eligible for GC: Set large or unused objects to null so they can be garbage collected:
   ex:  myLargeObject = null;

-> Close Resources Properly: Always close I/O, DB, and socket resources to avoid memory leaks:
   ex : try (Connection conn = dataSource.getConnection()) {
        // use conn
        } 

-> Avoid Memory Leaks: Don’t use long-lived static collections 
   (e.g., static List) unless necessary.

-> Use Profilers to Detect Leaks:
    Use tools like:
    VisualVM
    Eclipse MAT (Memory Analyzer Tool)
    JProfiler
    YourKit

-> Increase Heap Size (if truly needed)
   Use JVM flags to increase memory limits (when running the program):
   ex : java -Xmx1024m -Xms512m MyApp

    -Xms: Initial heap size
    -Xmx: Maximum heap size
    


________________________________________________________________________________________________________________________________________
✅ How to Optimise Slow Queries in SQL:
Use indexed columns in your WHERE condition.
Be selective in SELECT (avoid SELECT *). Don't retrieve all the data. Only the required column needs to be fetched.
Use LIMIT if you need only part of the data.
________________________________________________________________________________________________________________________________________
✅ How many objects will be created

String str = "hello";
str.concat("hi");

->str.concat("hi") creates a new string object on the heap.
->String in Java is immutable, meaning once created, it cannot be changed.
->str.concat("hi") returns a new String "hellohi", but you didn’t assign it to any variable.
->So the original str still refers to "hello".
________________________________________________________________________________________________________________________________________
String str = "hello";
str=str.concat("hi");

Then, 3 objects were created: 
1 ->hello-stringpool,
1-hi->stringpool,
1- heap as contact
________________________________________________________________________________________________________________________________________
✅ How to Resolve API Response Slowness
📌 Database Optimisation
    • Ensure proper indexes are created on the fields used in WHERE, JOIN, ORDER BY, and GROUP BY.
    • Avoid using SELECT *; fetch only the required columns.
    • Optimise queries and check execution plans to identify slow operations.
    • Use caching (Redis, Memcached, etc.) for frequently accessed or read-only data.
📦 Payload Optimisation
    • Avoid returning large payloads.
    • Implement pagination for list APIs.
    • Remove unnecessary metadata or nested objects from the response.
⚡ Code & Logic Optimization
    • Identify and refactor complex logic or blocking code.
    • Use asynchronous / non-blocking calls where applicable.
    • Optimise loops and redundant computations inside the API.
    • Profile and monitor performance hotspots.
🛠️ Infrastructure & API Design
    • Scale API servers horizontally (load balancing, auto-scaling).
    • Enable connection pooling for DB/API calls.
    • Use circuit breakers, bulkheads, and retries for external API calls.
    • Apply rate limiting and request throttling to prevent overload.
🗂️ Caching Strategies
    • Use application-level caching (in-memory / distributed).
    • Implement HTTP caching headers (ETag, Last-Modified, Cache-Control).
    • Cache DB queries or API responses where freshness is not critical.
________________________________________________________________________________________________________________________________________
* Connection pooling:  Is a technique where your application keeps a set (pool) of ready-to-use database connections instead of creating 
  a new one for every request.
  When the application starts, it creates a small number of database connections and stores them in a pool.
  When request comes Instead of creating a new DB connection, the app borrows one from the pool.
  Once done, the connection is returned to the pool (not closed). Now it’s available for another request.
  If traffic increases and more connections are needed, the pool can expand (up to a configured max-pool-size).

________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________




