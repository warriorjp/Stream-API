// ✅ Merge Sort

// TC - O(n log n)

package com.practice;
	
	import java.util.*;
	import java.util.stream.Collectors;
	
	public class Practice {
	
	    public static void main(String args[]) {
	    	 int arr[] = { 9, 4, 7, 6, 3, 1, 5 };
	    	 
	    	 mergeSort(arr, 0, arr.length-1);
	    	 
	    	 for(int i = 0; i < arr.length; i++) {
	    		 System.out.println(arr[i]);
	    	 }
	    }
	    
	    public static void mergeSort(int[] arr, int low, int high) {
	    	
	    	if(low >= high) return;
	    	
	      int mid = low + (high - low) / 2;
	      
	      mergeSort(arr, low, mid);  // Left Half
	      mergeSort(arr, mid+1, high);  // Right Half
	       
	      merge(arr, low, mid, high);   // Merge sorted halves
	    }
	    
	    public static void merge(int[] arr, int low, int mid, int high) {
	    	ArrayList<Integer> temp = new ArrayList<>();
	    	
	    	int left = low;  // starting index of left half of arr
	    	int right = mid + 1; // starting index of right half of arr
	    	
	    	 //storing elements in the temporary array in a sorted manner//
	    	
	    	while(left <= mid && right <= high) {
	    		if(arr[left] <= arr[right]) {
	    			temp.add(arr[left]);
	    			left++;
	    		} else {
	    			temp.add(arr[right]);
	    			right++;
	    		}
	    	}
	    	
	    	 // if elements on the left half are still left //
	    	
	    	while(left <= mid) {
	    		temp.add(arr[left]);
	    		left++;
	    	}
	    	
	    //  if elements on the right half are still left //
	    	
	    	while(right <= high) {
	    		temp.add(arr[right]);
	    		right++;
	    	}
	    	
	    	  // transfering all elements from temporary to arr //
	    	
	    	for(int i = low; i <= high; i++) {
	    		arr[i] = temp.get(i-low);
	    	}
	    }
	}

**********✅ Binary Search *********

// TC - O(log n)

 public static void main(String args[]) {

       int[] arr = {2, 4, 5, 6,7,8};
       
       int value = 6, low = 0, high = arr.length-1;
       
       while(low <= high) {
    	   int mid = low + (high - low) / 2;
    	   
    	   if(arr[mid] == value) {
    		   System.out.println(mid);
    		   break;
    	   } else if(arr[mid] < value) 
    		   low = mid + 1;
    	   else
    		   high = mid-1;
    	   
       }
  }

**********✅ Bubble Sort *********

TC - O(n^2)

import java.util.*;

public class Practice {
    static void bubble_sort(int[] arr, int n) {
        for (int i = n - 1; i >= 0; i--) {
            for (int j = 0; j <= i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }

        System.out.println("After bubble sort: ");
        
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        
        System.out.println();
    }
    public static void main(String args[]) {
        int arr[] = {13, 46, 24, 52, 20, 9};
        int n = arr.length;
        
        System.out.println("Before Using Bubble Sort: ");
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + " ");
        }
        
        System.out.println();
        bubble_sort(arr, n);
    }

}
