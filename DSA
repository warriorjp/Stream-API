**********✅ Binary Search *********

 public static void main(String args[]) {

       int[] arr = {2, 4, 5, 6,7,8};
       
       int value = 6, low = 0, high = arr.length-1;
       
       while(low <= high) {
    	   int mid = low + (high - low) / 2;
    	   
    	   if(arr[mid] == value) {
    		   System.out.println(mid);
    		   break;
    	   } else if(arr[mid] < value) 
    		   low = mid + 1;
    	   else
    		   high = mid-1;
    	   
       }
    }

**********✅ Find the pair sum *********

public static void main(String args[]) {

       int[] arr = {2, 3,4, 5, 6,7,8};
       
       int value = 11, low = 0, high = arr.length-1;
       
       while(low <= high) {
    	  int sum = arr[low] + arr[high];
    	  
    	  if(sum == value) {
    		  System.out.println(arr[low] + " + " + arr[high]);
    		  low++;
    		  high--;
    	  }
    	  
    	  else if(sum < value)
    		  low++;
    	  else
    		  high--;
       }
    }

**********✅ Find the first non repeating or NON repeating element *********

import java.util.*;
import java.util.stream.Collectors;

public class Practice {

    public static void main(String args[]) {

    	String st = "aabbccd";
    	
    	int[] freq = new int[200];
    	
    	char ch[] = st.toCharArray();
    	
    	for(int i = 0; i < st.length(); i++) {
    		if(st.charAt(i) == ' ')
    			continue;
    		else
    			freq[st.charAt(i)]++;
    	}
    	
    	for (int i = 0; i < st.length(); i++) {
            if (freq[(int) st.charAt(i)] == 1 && ch[i] != ' ') {
                System.out.print(ch[i] + " ");
                //break;     //add break when want to print first non repeating only
            }
        }    	
    }
}

// OR using HashMap or LinkedHashMap

 public static void main(String args[]) {
	
	    	String str = "abcddabfggkn";
	    	
	    	Map<Character, Integer> mp = new HashMap<>();
	    	
	    	for(char ch: str.toCharArray()) {
	    		  if(mp.containsKey(ch))
	    			    mp.put(ch, mp.get(ch)+1);
	    		  else
	    			    mp.put(ch, 1);
	    	}
	    	
	    	for(Map.Entry<Character, Integer> entry : mp.entrySet()) {
	    		  if(entry.getValue() == 1) {
	    			   System.out.println(entry.getKey());
	    			   break;
	    		  }
	    	}
	}

**********✅ Anagram String *********

import java.util.Arrays;

public class AnagramCheck {
    public static boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) return false;
        char[] sArr = s.toCharArray();
        char[] tArr = t.toCharArray();
        Arrays.sort(sArr);
        Arrays.sort(tArr);
        return Arrays.equals(sArr, tArr);
    }

    public static void main(String[] args) {
        System.out.println(isAnagram("listen", "silent")); // true
    }
}

**********✅ Count Frequency OR Get the element that appears only once  *********

import java.util.*;
import java.util.stream.Collectors;

public class Practice {

    public static void main(String args[]) {

    	 int[] nums = {4, 1, 2, 1, 2};

         HashMap<Integer, Long> frequencyMap = new HashMap<>();

         for (int num : nums) {
             frequencyMap.put(num, frequencyMap.getOrDefault(num, 0L) + 1); // getOrDefault() handles the check: If the key exists, it gets the value.
                                                                            // If the key does not exist, it returns the default (0L), so we safely increment.
         }

         
//         Get the element that appears only once 
         
         for (Map.Entry<Integer, Long> entry : frequencyMap.entrySet()) {
        	    if (entry.getValue() == 1) {
        	        System.out.println("Unique element: " + entry.getKey());
        	        break;
        	    }
         }
    }
}

//OR

if (map.containsKey(num)) {
    map.put(num, map.get(num) + 1);
} else {
    map.put(num, 1L); // use 1L to match long type
}

**********✅ TwoSum if Array is sorted *********


public class Practice {
	
	public static void main(String args[]) {
	
	    int arr[] = {-1,0};
	    	
	    int[] result = TwoSum(arr);
	    	
	    for(int e: result)
	    	System.out.println(e);
	    	
	}
	    
	public static int[] TwoSum(int[] arr) {
	    int sum = -1;	
	    int start = 0, end = arr.length-1;
	    	
	    while(arr[start] + arr[end] != sum) {
	    	if(arr[start] + arr[end] < sum)
			start++;
		else
			end--;
	    }
	    	
	    return new int[] {start, end};
	    }
}

**********✅ TwoSum if Array is Unsorted *********

public class Practice {
	public static void main(String args[]) {
		int arr[] = {2,7,11,15};
		int[] result = TwoSum(arr);

	    	for(int e: result)
	    		System.out.println(e);
	}
	 public static int[] TwoSum(int[] nums) {
	    	int target = 9;
		Map<Integer, Integer> numToIndex = new HashMap<>();

	         for (int i = 0; i < nums.length; i++) {
	             if (numToIndex.containsKey(target - nums[i])) {
	                 return new int[] {numToIndex.get(target - nums[i]), i};
	             }
	             numToIndex.put(nums[i], i);
	         }
	         
	         return new int[] {};
	    }
}

**********✅ Find max and second max from an array *********


public class Practice {
	public static void main(String args[]) {
	    int arr[] = {2,7,11,15};
	    int[] result = findMax(arr);

	    for(int r:result) {
	    	System.out.println(r);
	    }
	    	
	}
	    
	public static int[] findMax(int[] nums) {
		int max  = Integer.MIN_VALUE;
	        int secondMax = Integer.MIN_VALUE;
	        
	        for(int i = 0;i< nums.length;i++){
	            
	            if(nums[i] > max){   
	                secondMax = max;
	                max  = nums[i];
	            }else if(nums[i] > secondMax){
	                secondMax = nums[i];
	            }
	        }
	        
	        return  new int[] {max, secondMax};
	    }
}

**********✅ Find perticular char in String *********

public class Practice {
	public static void main(String args[]) {
	    String strr = "Rita Gujar Jay Patel";
	    	
	    System.out.println(findWord(strr));
	    	
	}
	    
	public static int findWord(String str) {
		char word = 'j';
	       for (int i = 0; i < str.length(); i++) {
	            if (str.charAt(i) == word) {
	                return i;
	            }
	        }
	        
	        return -1;
	    }
}

**********✅ Balanced Paranthesis *********

public class Practice {
	public static void main(String args[]) {
	    System.out.println(balancedParenthensies("()[]{}"));
	    System.out.println(balancedParenthensies("{(a},b)"));
	    System.out.println(balancedParenthensies("{)(a,b}"));
	    	
	}
	    
	public static boolean balancedParenthensies(String str) {
	    Stack<Character> stack = new Stack<>();
	    for(char ch : str.toCharArray()) {
	    	  if(ch == '{' || ch == '(' || ch == '[') {
	    		  stack.push(ch);
	    	  } else if(ch == '}') {
	    		  if(stack.isEmpty() || stack.pop() != '{')
	    			  return false;
	    	  }else if(ch == ')') {
	    		  if(stack.isEmpty() || stack.pop() != '(')
	    			  return false;
	    	  }else if(ch == ']') {
	    		  if(stack.isEmpty() || stack.pop() != '[')
	    			  return false;
	    	  }
		}
	       
	       return stack.isEmpty();  
	}
}

**********✅ LEFT Rotate an array by 1 position *********

public class Practice {
	public static void main(String args[]) {
	    int[] arr = {2, 4, 5, 6, 7, 10};
	    rotateAnArray(arr);
	}
	public static void rotateAnArray(int[] arr) {
	     int temp = arr[0];
	     for(int i = 1; i < arr.length; i++) {
		 arr[i-1] = arr[i];
	     }
	     arr[arr.length-1] = temp;
	     for(int e: arr)
		System.out.println(e);
	}
}

**********✅ LEFT Rotate an array by K positions *********

*****BRUTFORSE*****

public class Practice {
	public static void main(String args[]) {
	    int[] arr = {2, 4, 5, 6, 7, 10};
	    int k = 3;
	    rotateAnArray(arr, k);
	}
	public static void rotateAnArray(int[] arr, int k) {
		int temp[] = new int[k];
		int k = k % arr.length;   // 3 % 6 = 3, 10 % 6 = 4

		// temp[2,4,5] - TC - O(k)
	    	for(int i = 0; i < k; i++) {
	    		temp[i] = arr[i];
	    	}

		// arr[6,7,10] - TC - O(n-d)
	    	for(int  i = k; i < arr.length; i++) {
	    		arr[i-k] = arr[i];
	    	}
	    	
	    	int j = 0;

		// arr[6,7,10,2,4,5] TC - O(d)
	    	for(int i = arr.length-k; i < arr.length; i++) {
	    		arr[i] = temp[j];
	    		j++;
	    	}
	    	
	    	for(int e : arr) {
	    		System.out.println(e);
	    	}
	}
}

TC - O(d) + O(n-d) + O(d) = O(n+d)
SC - O(d) - temp arry

**********✅ LEFT Rotate an array by K position *********

********OPTIMISED*******

public class Practice {
	public static void main(String args[]) {
	    int n = 7;
	    int arr[] = {1, 2, 3, 4, 5, 6, 7};
	    int k = 3;
	    	
	    rotateAnArray(arr, n, k);
	         
	    for(int ele : arr) {
		System.out.println(ele);
	    }
	}
	    
	public static void rotateAnArray(int[] arr, int n, int k) {
	     if(n == 0) return;
	     k = k % n;
	       
   	     reverseArray(arr, 0, k-1);   //O(d)
	     reverseArray(arr, k, n-1);   //O(n-d)
	     reverseArray(arr, 0, n-1);   O(n)
	}
	public static void reverseArray(int[] arr, int start, int end) {
	     while(start <= end) {
	     int temp = arr[start];
	     arr[start] = arr[end];
	     arr[end] = temp;
	    		
	     start++;
	     end--;
	}
}

TC - O(2n) = O(n)
SC - O(1)

**********✅ Palindrome String Using RECURSION *********

public class Practice {
	public static void main(String args[]) {
	    String s = "aabbaa";
	    	
	    if(isParalindrom(s))
	    	System.out.println("String is Palindrome");
	    else
	    	System.out.println("String is Not Palindrome");

	}
	    
	public static boolean isParalindrom(String str) {
	     int start = 0, end = str.length()-1;
	      
	     return recursivePalindrom(str, start, end);
	}
	    
	public static boolean recursivePalindrom(String str, int start, int end) {
	     if(start >= end) 
	     	return true;
	    	
	     if(str.charAt(start) != str.charAt(end))
	    	return false;
	    	
	    return recursivePalindrom(str, ++start, --end);
	}
}

TC - O(n)

**********✅ Find the maximum element in an array using RECURSION *********

public class Practice {
	public static void main(String args[]) {
	    int[] arr = {4, 17, 3, 9, 20, 6};
	    	 
	    System.out.println(findMax(arr, 0));

	}
	    
	public static int findMax(int[] arr, int index) {
	     if(index == arr.length-1)
	    	  return arr[index];
	      
	      int maxElement = findMax(arr, index+1);
	      return Math.max(maxElement, arr[index]);
	}
}

TC - O(n)

**********✅ Implement substring search (strStr() or indexOf) *********

public class Practice {
	public static void main(String args[]) {
	    System.out.println(findSubStr("hello", "ll"));   
	}
	    
	public static int findSubStr(String str, String subStr) {
	    return str.indexOf(subStr);	    
	}
}

**********✅ Detect a Loop in LinkedList BRUTEFORCE *********

import java.util.HashSet;

class Node {
    int data;
    Node next;
    
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class LoopDetectionWithHashing {

    public static boolean hasLoop(Node head) {
        HashSet<Node> visited = new HashSet<>();

        Node current = head;
        while (current != null) {
            if (visited.contains(current)) {
                return true; // Loop detected
            }
            visited.add(current);
            current = current.next;
        }

        return false; // No loop
    }

    public static void main(String[] args) {
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = head.next; // Creates a loop

        System.out.println("Loop detected? " + hasLoop(head)); // Output: true
    }
}

**********✅ Detect a Loop in LinkedList Optimized *********

public class LinkedListLoopDetector {

    // Detects loop in the linked list
    public static boolean hasLoop(Node head) {
        Node slow = head;
        Node fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;           // moves 1 step
            fast = fast.next.next;      // moves 2 steps

            if (slow == fast) {
                return true;            // loop detected
            }
        }

	
    	// Loop Removal Algorithm
    	slow = head;
    	// checking for intersection of two pointers
   	 while (slow.next != fast.next) {
      		slow = slow.next;
     		fast = fast.next;
    	 }
   	 // loop termination
   	 fast.next = null;

        return false; // no loop
}

**********✅ Search Element in a Rotated Sorted Array *********

public class Demo {
    public static int search(ArrayList<Integer> arr, int n, int k) {
        int low = 0, high = n - 1;
        while (low <= high) {
            int mid = (low + high) / 2;

            // if mid points to the target
            if (arr.get(mid) == k)
                return mid;

            // if left part is sorted
            if (arr.get(low) <= arr.get(mid)) {
                if (arr.get(low) <= k && k <= arr.get(mid)) {
                    // element exists
                    high = mid - 1;
                } else {
                    // element does not exist
                    low = mid + 1;
                }
            } else { // if right part is sorted
                if (arr.get(mid) <= k && k <= arr.get(high)) {
                    // element exists
                    low = mid + 1;
                } else {
                    // element does not exist
                    high = mid - 1;
                }
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        ArrayList<Integer> arr = new ArrayList<>(Arrays.asList(7, 8, 9, 1, 2, 3, 4, 5, 6));
        int n = 9, k = 1;
        int ans = search(arr, n, k);
        if (ans == -1)
            System.out.println("Target is not present.");
        else
            System.out.println("The index is: " + ans);
    }
}


