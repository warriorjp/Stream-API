-> SQL commands are categorized into five types:

DDL (Data Definition Language) → CREATE, ALTER, DROP, TRUNCATE
DML (Data Manipulation Language) → INSERT, UPDATE, DELETE
DQL (Data Query Language) → SELECT
TCL (Transaction Control Language) → COMMIT, ROLLBACK, SAVEPOINT
DCL (Data Control Language) → GRANT, REVOKE


-----------------------------------------------------------------------------------------
| Command   | Removes Data?          | Can be Rolled Back?   | Affects Structure?  |
-----------------------------------------------------------------------------------------
| DELETE    | Yes (selected rows)    | Yes (COMMIT/ROLLBACK) | ❌ No               |
| TRUNCATE  | Yes (all rows)         | ❌ No                 | ❌ No               |
| DROP      | Yes (entire table)     | ❌ No                 | ✅ Yes (removes structure) |
-----------------------------------------------------------------------------------------


-------------------------------------------------------------------
| Constraint   | Uniqueness  | NULL Allowed?        | Usage            |
-------------------------------------------------------------------
| PRIMARY KEY  | ✅ Unique   | ❌ No                | One per table    |
| UNIQUE KEY   | ✅ Unique   | ✅ Yes (one NULL)    | Multiple per table |
-------------------------------------------------------------------

## JOIN
-> INNER JOIN
-> LEFT JOIN
-> RIGHT JOIN
-> FULL OUTER JOIN
Ex:
🟢 SELECT C.OrderID, C.CustomerName, O.OrderDate
FROM Orders O INNER JOIN Customers C ON O.CustomerID=C.CustomerID;
_________________________________________________________________________________

 -> DELETE FROM employees WHERE id = 5;  -- Deletes specific row
 -> TRUNCATE TABLE employees;  -- Deletes all rows
 -> DROP TABLE employees;  -- Deletes table structure
_________________________________________________________________________________
-> Using WHERE (Before GROUP BY)
🟢 SELECT * FROM employees WHERE salary > 50000;

-> Using group by
🟢 SELECT department, AVG(salary) FROM employees GROUP BY department;

-> Using HAVING (After GROUP BY)
🟢 SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 60000;
_________________________________________________________________________________
-> Get employees earning more than the average salary
SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
_________________________________________________________________________________

-> Find the second highest salary.
🟢 SELECT MAX(salary) FROM employees 
WHERE salary < (SELECT MAX(salary) FROM employees);

-> Find Duplicate Records from a Table
🟢 SELECT name, COUNT(name) 
FROM employee 
GROUP BY name 
HAVING COUNT(name) > 1;

-> Find 3th Highest Salary
🟢 SELECT DISTINCT salary FROM employees ORDER BY salary DESC LIMIT 3;

-> Find max salary by department
🟢 SELECT department, MAX(salary) AS max_salary
FROM employees
GROUP BY department;
_________________________________________________________________________________

-> Difference between Alter and Update
Alter - Alter is used to update the structure of the table, like column name, column type, column data type, and column size.
         Also, if we want to change the table name, then we use Alter.
         We want to remove the entire column we can use Alter.
Update - Update is used to update the table data. So if we want to perform any update operation on table data then we use Update.

-> Difference between Delete, Drop and Truncate
Delete (DML) - It is used to delete the data row-wise, it will delete the data or row one by one.
              DELETE from employee;
              DELETE from employee where id=1;
              ROLLBACK employee;  // Is possible in DELETE. But rollback should be done before commit.
Drop (DDL) - It is use the remove the entire table with the table structure.
             DROP table employee;
Truncate (DDL) - It is also used to delete the table's data, but it deletes all rows in one go.
             TRUNCATE TABLE employee;
             ROLLBACK employee;  // Is not possible in TRUNCATE
_______________________________________________________________________________________

NOTE : 1. When using GROUP BY with a column, any column included in the SELECT statement must either be:
          a. Included in the GROUP BY clause, or
          b. Used with an aggregate function such as MIN(), MAX(), COUNT(), SUM(), etc.

          Example:
          🟢  SELECT Department, COUNT(*) 
            FROM Employees 
            GROUP BY Department;
       2. When a subquery (inner query) returns multiple values, use the IN operator instead of =.
          a. The = operator compares a single value.
          b. The IN operator checks if a value exists within a list of values returned by the subquery.

          Example:
          -- Correct usage with multiple values
         🟢  SELECT Name 
            FROM Employees 
            WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'NY');


-> Write a SQL query to display the employee's name who is taking the maximum salary.
  🟢 SELECT emp_name FROM employee where salary = (SELECT max(salary) from employee);

-> Write a query to display all the department names along with the no. of employees working in that department.
 🟢 SELECT dept, count(*) FROM employee GROUP BY dept;
      Or
 🟢 SELECT dept, count(dept) FROM employee GROUP BY dept;

Output - 
      HR   | 2
      MRKT | 1
      IT   | 3
-> Write a query to display all the department names where the number of employees is less than 2.
🟢  SELECT dept FROM employee GROUP BY dept HAVING COUNT(*) < 2;

Output -  MRKT

-> Write a query to display the name of the employee in which department no. of employees is less than 2.
 🟢 SELECT emp_name from employee where dept IN (SELECT dept FROM employee GROUP BY dept HAVING COUNT(*) < 2);

-> Write a query to display the highest salary department-wise and the name of the employee who is receiving that highest salary.
 🟢 SELECT e.emp_name, e.dept, e.salary FROM employee e WHERE e.salary = 
  (SELECT MAX(salary) FROM employee WHERE dept = e.dept);
___________________________________________________________________________________________________

## JOINS = Cross Product + Select Statement(Condition)
Natural Join
Self join
INNER Join
LEFT Join
RIGHT Join
FULL OUTER Join


  Emp                           dept
eno | ename | address      dno | dname | eno
1   | Ram   | Pune         D1  | HR    | 1
2   | Shyam | Mumbai       D2  | IT    | 2
3   | John  | Delhi        D3  | MRKT  | 4
4   | Mark  | HYD

Natural Join - 
   We use a natural join -
  1. When we have a common attribute in two tables, whose names should be the same.
  2. When we keep that common attribute equal.

-> Find the name of an employee who is working in a department
 🟢  SELECT ename FROM emp, dept WHERE emp.eno = dept.eno;
                          OR
 🟢  SELECT ename FROM emp NATURAL JOIN dept;

Self Join - 
   When a table is joined with itself

