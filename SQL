-> SQL commands are categorized into five types:

DDL (Data Definition Language) → CREATE, ALTER, DROP, TRUNCATE
DML (Data Manipulation Language) → INSERT, UPDATE, DELETE
DQL (Data Query Language) → SELECT
TCL (Transaction Control Language) → COMMIT, ROLLBACK, SAVEPOINT
DCL (Data Control Language) → GRANT, REVOKE

_________________________________________________________________________________
Command	Removes Data?	     | Can be Rolled Back?	    | Affects Structure?
___________________________|_________________________|_____________________________
DELETE Yes (selected rows) | 	Yes (COMMIT/ROLLBACK)  |  ❌ No
TRUNCATE	Yes (all rows)	   | ❌ No	                  |  ❌ No
DROP	Yes (entire table)	   | ❌ No	                  |  ✅ Yes (removes structure)
_________________________________________________________________________________

_________________________________________________________________________________
Constraint	 | Uniqueness	  | NULL Allowed?	      | Usage
____________|______________|_____________________|____________________________________
PRIMARY KEY	| ✅ Unique	   | ❌ No	              | One per table
UNIQUE KEY	 | ✅ Unique	   | ✅ Yes (one NULL)   | Multiple per table
_________________________________________________________________________________
## JOIN
-> INNER JOIN
-> LEFT JOIN
-> RIGHT JOIN
-> FULL OUTER JOIN
Ex:
SELECT C.OrderID, C.CustomerName, O.OrderDate
FROM Orders O INNER JOIN Customers C ON O.CustomerID=C.CustomerID;
_________________________________________________________________________________

 -> DELETE FROM employees WHERE id = 5;  -- Deletes specific row
 -> TRUNCATE TABLE employees;  -- Deletes all rows
 -> DROP TABLE employees;  -- Deletes table structure
_________________________________________________________________________________
-> Using WHERE (Before GROUP BY)
SELECT * FROM employees WHERE salary > 50000;

-> Using group by
SELECT department, AVG(salary) FROM employees GROUP BY department;

-> Using HAVING (After GROUP BY)
SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 60000;
_________________________________________________________________________________
-> Get employees earning more than the average salary
SELECT name FROM employees WHERE salary > (SELECT AVG(salary) FROM employees);
_________________________________________________________________________________

-> Find the second highest salary.
SELECT MAX(salary) FROM employees 
WHERE salary < (SELECT MAX(salary) FROM employees);

-> Find Duplicate Records from a Table
SELECT name, COUNT(name) 
FROM employee 
GROUP BY name 
HAVING COUNT(name) > 1;

-> Find 3th Highest Salary
SELECT DISTINCT salary FROM employees ORDER BY salary DESC LIMIT 3;




