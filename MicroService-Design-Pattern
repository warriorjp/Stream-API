ðŸ”¹ API Gateway :
âœ… An API Gateway is an essential component in a microservices architecture, acting as single entry point for all client requests.
It provides functionalities like routing, authentication, load balancing, rate limiting, and monitoring while simplifying 
communication between clients and backend services.

ðŸ”¹ Service Registry :
âœ… The Service Registry is a crucial pattern in microservices architecture that helps services discover and 
communicate with each other dynamically. It maintains a directory of available microservices and their locations (IP addresses, ports, and metadata).

ðŸ”¹ Circuit Breaker 
âœ… The Circuit Breaker pattern is used in microservices to prevent cascading failures when a service is slow, failing, or unavailable. 
It helps improve system resilience by stopping requests to failing services and allowing them to recover before retrying.

Why Use a Circuit Breaker?
âœ… Prevents cascading failures â€“ Stops excessive calls to failing services.
âœ… Improves response time â€“ Avoids waiting for timeouts.
âœ… Enhances system resilience â€“ Allows degraded services to recover.
âœ… Reduces unnecessary load â€“ Blocks calls to unhealthy services.

ðŸ”¹ Database per Service 
In a microservices architecture, each service should own its own database. This pattern is called Database per Service, 
ensuring data autonomy, scalability, and independence for each microservice.

Why Use a Database per Service?
âœ… Data Isolation â€“ Services donâ€™t share databases, preventing tight coupling.
âœ… Scalability â€“ Each service can scale independently based on its workload.
âœ… Technology Flexibility â€“ Different databases can be used for different services (e.g., MySQL for orders, MongoDB for users).
âœ… Security & Compliance â€“ Data access is restricted to the owning service, reducing risks.
âœ… Failure Isolation â€“ If one serviceâ€™s database fails, others remain unaffected.

ðŸ”¹ CQRS :
âœ… The CQRS (Command Query Responsibility Segregation) design pattern is used in microservices and complex systems to separate 
The read and write operations are performed on different models. This separation improves scalability, performance, and maintainability. 
especially in systems with high read/write loads or complex business logic.
-------------------------------------------------------------------------------------------------------------------------
Benefit	                 |      Explanation
-------------------------------------------------------------------------------------------------------------------------
Scalability:             |  You can scale the read and write parts independently.
Performance	             |  Queries can be optimised for reads (caching, denormalisation) and writes for business logic and validation.
Separation of Concerns:  | Business logic and data access are clearly separated.
Flexibility              | enables the use of different storage models (e.g., SQL for writes, NoSQL for reads).
--------------------------------------------------------------------------------------------------------------------------

ðŸ”¹ Saga Pattern 
âœ… The Saga Pattern is a distributed transaction management approach in microservices architecture.
It ensures data consistency across multiple services without using two-phase commits (2PC).
